<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>$ ./vbergeron.dev</title>
    <link href="https://vbergeron.dev/blog" />
    <link type="application/atom+xml" rel="self" href="https://vbergeron.dev/blog/feed.atom" />
    <updated>2024-07-11T12:58:03+00:00</updated>
    <id>https://vbergeron.dev/blog/feed.atom</id>
    <author>
        <name>Vincent Bergeron</name>
    </author>
                <entry>
    <id>https://vbergeron.dev/blog/ways-to-check-if-the-user-is-logged-in-or-not</id>
    <link type="text/html" rel="alternate" href="https://vbergeron.dev/blog/ways-to-check-if-the-user-is-logged-in-or-not" />
    <title>Ways to Check if the User is Logged In or Not</title>
    <published>2024-07-11T00:00:00+00:00</published>
    <updated>2024-07-11T00:00:00+00:00</updated>
    <author>
        <name>Vincent Bergeron</name>
    </author>
    <summary type="html">In Laravel, there are many ways to check whether a user is logged in. In this post, I will demonstrate my favorite methods for performing these checks. A lot of people use &lt;code&gt;auth()-&amp;gt;user()&lt;/code&gt;, but Laravel offers us other methods to avoid using......</summary>
    <content type="html"><![CDATA[
        <p>In Laravel, there are many ways to check whether a user is logged in. In this post, I will demonstrate my favorite methods for performing these checks. A lot of people use <code>auth()-&gt;user()</code>, but Laravel offers us other methods to avoid using negation.</p>

<h3>Checking if the User is Logged In</h3>

<p>Although some people might tend to use <code>auth()-&gt;user()</code>, I prefer <code>check</code> as it returns a boolean.</p>

<pre><code class="language-php">&lt;?php

if (auth()-&gt;check()) {
    // The user is logged in
}

// You can also use the following, which does the same thing as `check`
if (auth()-&gt;hasUser()) {
    // The user is logged in
}
</code></pre>

<h3>Checking if the User is Not Logged In</h3>

<p>I prefer this over using <code>!auth()-&gt;check()</code> or <code>auth()-&gt;user() === null</code> because <code>guest</code> clearly indicates that the user is not recognized by the system.</p>

<pre><code class="language-php">&lt;?php

if (auth()-&gt;guest()) {
    // The user is not logged in
}
</code></pre>

<p>I try to limit my use of <code>auth()-&gt;user()</code> to situations where I need the current user to ensure my code is as clean as possible and easy to understand by avoiding negation in my conditionals.</p>

<p>My posts are short for now. I am trying to get used to writing and hope to be able to write longer content in the future, but I hope it is still useful to you. ðŸ™‚</p>
    ]]></content>
</entry>
            <entry>
    <id>https://vbergeron.dev/blog/how-i-test-laravel-middlewares-in-isolation</id>
    <link type="text/html" rel="alternate" href="https://vbergeron.dev/blog/how-i-test-laravel-middlewares-in-isolation" />
    <title>How I test Laravel Middlewares in isolation</title>
    <published>2024-07-10T00:00:00+00:00</published>
    <updated>2024-07-10T00:00:00+00:00</updated>
    <author>
        <name>Vincent Bergeron</name>
    </author>
    <summary type="html">Not so long ago, a colleague of mine showed me a method to test middlewares that totally changed how I test them now.

For a long time, I tested middlewares by creating a fake Laravel request, instantiating the middleware, and calling the `handle method......</summary>
    <content type="html"><![CDATA[
        <p>Not so long ago, a colleague of mine showed me a method to test middlewares that totally changed how I test them now.</p>

<p>For a long time, I tested middlewares by creating a fake Laravel request, instantiating the middleware, and calling the `handle method with my fake $request object. This approach was working but caused some problems, such as handling an authenticated user or adding POST data. This required a deep understanding of Laravel requests, which is beneficial but added complexity to writing tests.</p>

<p>Luckily for us, there's an easier way to do it. The method consists of registering a fake route and attaching a middleware to it in the test itself.</p>

<pre><code class="language-php">&lt;?php

#[Test]
public function non_admin_gets_a_forbidden_response(): void
{
    $user = User::factory()-&gt;create(['is_admin' =&gt; false]);

    Route::get('/foo', fn(): Response =&gt; response('OK'))
        -&gt;middleware(AuthorizeAdmin::class);

    $this-&gt;actingAs($user)
        -&gt;get('/foo')
        -&gt;assertForbidden();
}
</code></pre>

<p>This way, we are still testing the middleware in isolation, and we get to use Laravel's built-in get method instead of calling the handle method on the middleware ourselves.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://vbergeron.dev/blog/welcome-to-vbergeron-dev</id>
    <link type="text/html" rel="alternate" href="https://vbergeron.dev/blog/welcome-to-vbergeron-dev" />
    <title>Welcome to vbergeron.dev!</title>
    <published>2024-07-09T00:00:00+00:00</published>
    <updated>2024-07-09T00:00:00+00:00</updated>
    <author>
        <name>Vincent Bergeron</name>
    </author>
    <summary type="html">Welcome to my personal website. Creating a personal website has been on my mind for ages, but I always procrastinated.

On this website, you can expect some blog posts that I&#039;ll write as I come across interesting things while developing software at work.......</summary>
    <content type="html"><![CDATA[
        <p>Welcome to my personal website. Creating a personal website has been on my mind for ages, but I always procrastinated.</p>

<p>On this website, you can expect some blog posts that I'll write as I come across interesting things while developing software at work. Hopefully, I'll have some great things to share soon.</p>
    ]]></content>
</entry>
    </feed>
